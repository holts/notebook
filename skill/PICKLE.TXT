Linux编程之序列化存储Python对象(上) 
 
[ 作者:  加入时间:2006-11-01 09:38:09  来自:e0755.cn ] 
 
 
 
 什么是持久性？ 

持久性的基本思想很简单。假定有一个 Python 程序，它可能是一个管理日常待办事项的程序，您希望在多次执行这个程序之间可以保存应用程序对象（待办事项）。换句话说，您希望将对象存储在磁盘上，便于以后检索。这就是持久性。要达到这个目的，有几种方法，每一种方法都有其优缺点。 

例如，可以将对象数据存储在某种格式的文本文件中，譬如 CSV 文件。或者可以用关系数据库，譬如 Gadfly、MySQL、PostgreSQL 或者 DB2。这些文件格式和数据库都非常优秀，对于所有这些存储机制，Python 都有健壮的接口。 

这些存储机制都有一个共同点：存储的数据是独立于对这些数据进行操作的对象和程序。这样做的好处是，数据可以作为共享的资源，供其它应用程序使用。缺点是，用这种方式，可以允许其它程序访问对象的数据，这违背了面向对象的封装性原则 — 即对象的数据只能通过这个对象自身的公共（public）接口来访问。 

另外，对于某些应用程序，关系数据库方法可能不是很理想。尤其是，关系数据库不理解对象。相反，关系数据库会强行使用自己的类型系统和关系数据模型（表），每张表包含一组元组（行），每行包含具有固定数目的静态类型字段（列）。如果应用程序的对象模型不能够方便地转换到关系模型，那么在将对象映射到元组以及将元组映射回对象方面，会碰到一定难度。这种困难常被称为阻碍性不匹配（impedence-mismatch）问题。 

对象持久性 

如果希望透明地存储 Python 对象，而不丢失其身份和类型等信息，则需要某种形式的对象序列化：它是一个将任意复杂的对象转成对象的文本或二进制表示的过程。同样，必须能够将对象经过序列化后的形式恢复到原有的对象。在 Python 中，这种序列化过程称为 pickle，可以将对象 pickle 成字符串、磁盘上的文件或者任何类似于文件的对象，也可以将这些字符串、文件或任何类似于文件的对象 unpickle 成原来的对象。我们将在本文后面详细讨论 pickle。 

假定您喜欢将任何事物都保存成对象，而且希望避免将对象转换成某种基于非对象存储的开销；那么 pickle 文件可以提供这些好处，但有时可能需要比这种简单的 pickle 文件更健壮以及更具有可伸缩性的事物。例如，只用 pickle 不能解决命名和查找 pickle 文件这样的问题，另外，它也不能支持并发地访问持久性对象。如果需要这些方面的功能，则要求助类似于 ZODB（针对 Python 的 Z 对象数据库）这类数据库。ZODB 是一个健壮的、多用户的和面向对象的数据库系统，它能够存储和管理任意复杂的 Python 对象，并支持事务操作和并发控制。（请参阅参考资料，以下载 ZODB。）令人足够感兴趣的是，甚至 ZODB 也依靠 Python 的本机序列化能力，而且要有效地使用 ZODB，必须充分了解 pickle。 

另一种令人感兴趣的解决持久性问题的方法是 Prevayler，它最初是用 Java 实现的（有关 Prevaylor 方面的 developerWorks 文章，请参阅参考资料）。最近，一群 Python 程序员将 Prevayler 移植到了 Python 上，另起名为 PyPerSyst，由 SourceForge 托管（有关至 PyPerSyst 项目的链接，请参阅参考资料）。Prevayler/PyPerSyst 概念也是建立在 Java 和 Python 语言的本机序列化能力之上。PyPerSyst 将整个对象系统保存在内存中，并通过不时地将系统快照 pickle 到磁盘以及维护一个命令日志（通过此日志可以重新应用最新的快照）来提供灾难恢复。所以，尽管使用 PyPerSyst 的应用程序受到可用内存的限制，但好处是本机对象系统可以完全装入到内存中，因而速度极快，而且实现起来要比如 ZODB 这样的数据库简单，ZODB 允许对象的数目比同时在能内存中所保持的对象要多。 

既然我们已经简要讨论了存储持久对象的各种方法，那么现在该详细探讨 pickle 过程了。虽然我们主要感兴趣的是探索以各种方式来保存 Python 对象，而不必将其转换成某种其它格式，但我们仍然还有一些需要关注的地方，譬如：如何有效地 pickle 和 unpickle 简单对象以及复杂对象，包括定制类的实例；如何维护对象的引用，包括循环引用和递归引用；以及如何处理类定义发生的变化，从而使用以前经过 pickle 的实例时不会发生问题。我们将在随后关于 Python 的 pickle 能力探讨中涉及所有这些问题。 


一些经过 pickle 的 Python 

pickle 模块及其同类模块 cPickle 向 Python 提供了 pickle 支持。后者是用 C 编码的，它具有更好的性能，对于大多数应用程序，推荐使用该模块。我们将继续讨论 pickle，但本文的示例实际是利用了 cPickle。由于其中大多数示例要用 Python shell 来显示，所以先展示一下如何导入 cPickle，并可以作为 pickle 来引用它： 


　　>>> import cPickle as pickle
 

　 

现在已经导入了该模块，接下来让我们看一下 pickle 接口。pickle 模块提供了以下函数对：dumps(object) 返回一个字符串，它包含一个 pickle 格式的对象；loads(string) 返回包含在 pickle 字符串中的对象；dump(object, file) 将对象写到文件，这个文件可以是实际的物理文件，但也可以是任何类似于文件的对象，这个对象具有 write() 方法，可以接受单个的字符串参数；load(file) 返回包含在 pickle 文件中的对象。 

缺省情况下，dumps() 和 dump() 使用可打印的 ASCII 表示来创建 pickle。两者都有一个 final 参数（可选），如果为 True，则该参数指定用更快以及更小的二进制表示来创建 pickle。loads() 和 load() 函数自动检测 pickle 是二进制格式还是文本格式。 

清单 1 显示了一个交互式会话，这里使用了刚才所描述的 dumps() 和 loads() 函数： 


　　Welcome To PyCrust 0.7.2 - The Flakiest Python Shell
　　Sponsored by Orbtech - Your source for Python programming expertise.
　　Python 2.2.1 (#1, Aug 27 2002, 10:22:32)
　　[GCC 3.2 (Mandrake Linux 9.0 3.2-1mdk)] on linux-i386
　　Type "copyright", "credits" or "license" for more information.
　　>>> import cPickle as pickle
　　>>> t1 = ('this is a string', 42, [1, 2, 3], None)
　　>>> t1
　　('this is a string', 42, [1, 2, 3], None)
　　>>> p1 = pickle.dumps(t1)
　　>>> p1
　　"(S'this is a string'\nI42\n(lp1\nI1\naI2\naI3\naNtp2\n."
　　>>> print p1
　　(S'this is a string'
　　I42
　　(lp1
　　I1
　　aI2
　　aI3
　　aNtp2
　　.
　　>>> t2 = pickle.loads(p1)
　　>>> t2
　　('this is a string', 42, [1, 2, 3], None)
　　>>> p2 = pickle.dumps(t1, True)
　　>>> p2
　　'(U\x10this is a stringK*]q\x01(K\x01K\x02K\x03eNtq\x02.'
　　>>> t3 = pickle.loads(p2)
　　>>> t3
　　('this is a string', 42, [1, 2, 3], None)
 

　　 


清单 1. dumps() 和 loads() 的演示
注：该文本 pickle 格式很简单，这里就不解释了。事实上，在 pickle 模块中记录了所有使用的约定。我们还应该指出，在我们的示例中使用的都是简单对象，因此使用二进制 pickle 格式不会在节省空间上显示出太大的效率。然而，在实际使用复杂对象的系统中，您会看到，使用二进制格式可以在大小和速度方面带来显著的改进。 

接下来，我们看一些示例，这些示例用到了 dump() 和 load()，它们使用文件和类似文件的对象。这些函数的操作非常类似于我们刚才所看到的 dumps() 和 loads()，区别在于它们还有另一种能力 — dump() 函数能一个接着一个地将几个对象转储到同一个文件。随后调用 load() 来以同样的顺序检索这些对象。清单 2 显示了这种能力的实际应用： 


　　>>> a1 = 'apple'
　　>>> b1 = {1: 'One', 2: 'Two', 3: 'Three'}
　　>>> c1 = ['fee', 'fie', 'foe', 'fum']
　　>>> f1 = file('temp.pkl', 'wb')
　　>>> pickle.dump(a1, f1, True)
　　>>> pickle.dump(b1, f1, True)
　　>>> pickle.dump(c1, f1, True)
　　>>> f1.close()
　　>>> f2 = file('temp.pkl', 'rb')
　　>>> a2 = pickle.load(f2)
　　>>> a2
　　'apple'
　　>>> b2 = pickle.load(f2)
　　>>> b2
　　{1: 'One', 2: 'Two', 3: 'Three'}
　　>>> c2 = pickle.load(f2)
　　>>> c2
　　['fee', 'fie', 'foe', 'fum']
　　>>> f2.close()
　　
 

　　 


清单 2. dump() 和 load() 示例

Pickle 的威力 

到目前为止，我们讲述了关于 pickle 方面的基本知识。在这一节，将讨论一些高级问题，当您开始 pickle 复杂对象时，会遇到这些问题，其中包括定制类的实例。幸运的是，Python 可以很容易地处理这种情形。 

可移植性 

从空间和时间上说，Pickle 是可移植的。换句话说，pickle 文件格式独立于机器的体系结构，这意味着，例如，可以在 Linux 下创建一个 pickle，然后将它发送到在 Windows 或 Mac OS 下运行的 Python 程序。并且，当升级到更新版本的 Python 时，不必担心可能要废弃已有的 pickle。Python 开发人员已经保证 pickle 格式将可以向后兼容 Python 各个版本。事实上，在 pickle 模块中提供了有关目前以及所支持的格式方面的详细信息： 


　　>>> pickle.format_version
　　'1.3'
　　>>> pickle.compatible_formats
　　['1.0', '1.1', '1.2']
 

　　 

清单 3. 检索所支持的格式
多个引用，同一对象 

在 Python 中，变量是对象的引用。同时，也可以用多个变量引用同一个对象。经证明，Python 在用经过 pickle 的对象维护这种行为方面丝毫没有困难，如清单 4 所示： 


　　>>> a = [1, 2, 3]
　　>>> b = a
　　>>> a
　　[1, 2, 3]
　　>>> b
　　[1, 2, 3]
　　>>> a.append(4)
　　>>> a
　　[1, 2, 3, 4]
　　>>> b
　　[1, 2, 3, 4]
　　>>> c = pickle.dumps((a, b))
　　>>> d, e = pickle.loads(c)
　　>>> d
　　[1, 2, 3, 4]
　　>>> e
　　[1, 2, 3, 4]
　　>>> d.append(5)
　　>>> d
　　[1, 2, 3, 4, 5]
　　>>> e
　　[1, 2, 3, 4, 5]
 

　　 

清单 4. 对象引用的维护
循环引用和递归引用 

可以将刚才演示过的对象引用支持扩展到循环引用（两个对象各自包含对对方的引用）和递归引用（一个对象包含对其自身的引用）。下面两个清单着重显示这种能力。我们先看一下递归引用： 


　　>>> l = [1, 2, 3]
　　>>> l.append(l)
　　>>> l
　　[1, 2, 3, [...]]
　　>>> l[3]
　　[1, 2, 3, [...]]
　　>>> l[3][3]
　　[1, 2, 3, [...]]
　　>>> p = pickle.dumps(l)
　　>>> l2 = pickle.loads(p)
　　>>> l2
　　[1, 2, 3, [...]]
　　>>> l2[3]
　　[1, 2, 3, [...]]
　　>>> l2[3][3]
　　[1, 2, 3, [...]]
 

　　 

清单 5. 递归引用
现在，看一个循环引用的示例： 


　　>>> a = [1, 2]
　　>>> b = [3, 4]
　　>>> a.append(b)
　　>>> a
　　[1, 2, [3, 4]]
　　>>> b.append(a)
　　>>> a
　　[1, 2, [3, 4, [...]]]
　　>>> b
　　[3, 4, [1, 2, [...]]]
　　>>> a[2]
　　[3, 4, [1, 2, [...]]]
　　>>> b[2]
　　[1, 2, [3, 4, [...]]]
　　>>> a[2] is b
　　1
　　>>> b[2] is a
　　1
　　>>> f = file('temp.pkl', 'w')
　　>>> pickle.dump((a, b), f)
　　>>> f.close()
　　>>> f = file('temp.pkl', 'r')
　　>>> c, d = pickle.load(f)
　　>>> f.close()
　　>>> c
　　[1, 2, [3, 4, [...]]]
　　>>> d
　　[3, 4, [1, 2, [...]]]
　　>>> c[2]
　　[3, 4, [1, 2, [...]]]
　　>>> d[2]
　　[1, 2, [3, 4, [...]]]
　　>>> c[2] is d
　　1
　　>>> d[2] is c
　　1
 

　　 

清单 6. 循环引用
注意，如果分别 pickle 每个对象，而不是在一个元组中一起 pickle 所有对象，会得到略微不同（但很重要）的结果，如清单 7 所示： 


　　>>> f = file('temp.pkl', 'w')
　　>>> pickle.dump(a, f)
　　>>> pickle.dump(b, f)
　　>>> f.close()
　　>>> f = file('temp.pkl', 'r')
　　>>> c = pickle.load(f)
　　>>> d = pickle.load(f)
　　>>> f.close()
　　>>> c
　　[1, 2, [3, 4, [...]]]
　　>>> d
　　[3, 4, [1, 2, [...]]]
　　>>> c[2]
　　[3, 4, [1, 2, [...]]]
　　>>> d[2]
　　[1, 2, [3, 4, [...]]]
　　>>> c[2] is d
　　0
　　>>> d[2] is c
　　0
 

　　 

清单 7. 分别 pickle vs. 在一个元组中一起 pickle
 











Python 之旅 (六)

文/马儿 (marr@softwareliberty.org)

程式语言是人们与电脑系统的沟通媒介工具，一般人学习程式语言的目的之一，所图还是实际写作出能够解决问题的程式片段或系统，也就是程式开发专案里的一部份。‘专案管理’或‘程式开发’都是相当庞大的工作，其复杂程度经常超过投身其中的人员所能想像，‘没有专案管理，就没有软体生命’，重要性难以言喻。尤其开放源码模式的开发专案，几乎都是透过网路媒介进行，如何将分散的资源紧密结合，在预期时距内完成专案成果，成为一门难度极高的艺术挑战。

Python 专案开发观摩

俗话有云，学以致用，观摩并实际参与专案，是相当理想的学习经验。现有广为人知的开放源码软体，本身都具备一套‘有效’的专案管理体系，以 Python 使用族群为例，Python 语言的改进，以程式版本为里程碑，目前最新版的发展中版本为 2.2，日前已释出 2.2a1 版本供发展人员测试，每次 Python 语言要加入新特色或是修改内容前，发展人员都应该提出一份‘改进提案’(Python Enhancement Proposals, PEPs)，而实际的开发工作，通常就是审视 PEP 的建议内容，并予以实作为原始码。

有兴趣尝鲜的朋友，可以从网站下载 alpha 版本 (主要供发展人员) 或 beta 版本 (主要供非实用场合的一般使用者) 来测试。第一线的发展人员，通常是直接以 CVS (Concurrent Versions System) 维护方式来参与，并以 mailing list 来分享经验及讨论，CVS 与 mailing list 是获得专案成果最新最快的方式之一，开发人员应该加以认识了解。进一步由 Python 所衍生出来的程式专案，我们可以到 SourceForge 或 Freshmeat 寻宝，数百个大大小小的开发专案正在进行当中，建议配合自己的应用需要，找个能够协助解决日常生活问题的工作程式，一个成功的程式专案，必须在参与和沟通中不断进展。譬如说，喜欢利用 Python 语法写作视窗应用程式的朋友，可以找寻 wxPython 的相关资料。



●图: wxPython 与 wxHTML 应用结合

　

另外，值得特别说明的是，Zope 这套网站应用程式系统，它除了被誉为是 Python 的杀手级应用程式外，本身也衍生出日趋完整的程式开发与专案管理模式，我们将直接以 Zope 的相关资源，介绍 Python 学习者参与专案开发的可行途径。

Zope 简介

Zope 是‘Z Object Publishing Environment’的缩写，一套以 Python 程式语言为基底所发展的 Web Application Server 软体，简单地说，透过网页的操作介面，资料库管理人员、网页设计人员、网页内容维护人员，可以协同制作动态网页，相当轻松地把文件安全模式、资料库存取、物件体系、应用程式、流程管理，各式丰富功能整合起来。

如果你觉得不够具体，想知道 Zope 与现有哪些程式软体部份功能相仿，那么举些常见的例子：PHP、IBM Websphere、Enhydra、Tomcat、Cold Fusion、Microsoft Active Server Pages，说穿了，只要是能够产生动态网页的程式工具，我们都可以视之为相仿。至于究竟哪一套最好，在下无法提供答案，自古文人总相轻，网路上已有许多褒此贬彼的软体评比文件，请读者依自己的场合需要，事先货比三家，或是请教技术顾问人员。

内容管理

在此能够肯定的是，如果你的网站需求只是几张静态网页，那么采用 Zope 便显得杀鸡用牛刀，Zope 的优势在于应用物件模型，配合资料库储存的丰富资料，将庞大复杂的系统予以整合简化，我相信这样的应用趋势才是符合多数人的期盼。

随着个人电脑的普及，电脑设备已经成为办公室里的重要商务工具，相信日后也会普遍至多数家庭，当个人电脑里塞满公司或个人的重要资料，此时一套有如档案柜的资料库系统，以及一套有问必答的内容管理介面，便成为日常应用中最重要的工具，目前最被看好的工具组合，即是网页伺服器与浏览器。Microsoft 的 .NET 计画里，同样为网页内容物件勾勒出一个美好的未来，将网页内容储存在远端的伺服器上，透过特定的应用程式服务，使用者可以从原有的资料加工后获得所需的资讯服务。

Zope 功能及应用

早在 1996 年，Zope 系统的前身称为 Principia，是一套协助媒体单位进行线上出版流程的系统，因此 Zope 一开始即具备线上出版及内容管理的模型框架。

身为一套网站应用程式系统，其功能应用场合相当广泛，例如提供一个类似 Yahoo 的搜寻网站，组织一个类似 SourceForge 的专案开发平台，架设一个类似 HotMail 的邮件伺服器。目前包括美国太空总署、美国海军、奇异航空引擎公司在内，均采用 Zope 于多种应用场合，当中最受欢迎的应用方式就是动态网页与资料库结合，而新的功能，诸如 XML 或 WebDAV，同时也在积极发展当中，大抵都围绕着协同式作业 (collaboration) 的主题。

在架构设计上，Zope 重视将逻辑 (logic)、内容 (content)、表现 (presentation)等三方面要素予以区隔，而以层层包装的方式，将程式人员与提供内容的一般使用者，整合在同样的浏览器介面下。举例来说，一般办公室常见的电脑工作，诸如签发公文、填写申请表、数据统计、专案开发管理、群组行事历等，都可以在 Zope 的整合环境下完成建置。Zope 本身既是一套架构体系，也是一套日益丰富完整的工具，从技术角度来看它，其功能内容几乎可以涵盖一般人的所有需求。



●图: Zope 简略架构示意

Zope 系统项目

从网路下载的 Zope 软体，完整标准内容即包含许多项目，主要有：

网页伺服器

Zope 附有一个内建的 ZServer 网页伺服器程式，由于是专为 Zope 环境所撰写，所以运作功能最完整。当然，你还是可以使用原本的 Apache Web Server 或是 Microsoft IIS，甚至任何一个可以支援 CGI 功能的网页伺服器，Zope 的操作环境同样可以配合它们。

网页式管理介面

在 Zope 环境下建置动态网页资料，可以透过一个相当一致的网页式管理介面，进行网页写作、程式撰写、资料库连结等工作，如此一来，使用者可以适用一套熟悉的介面，随时随地进行编修，降低客户端程式 (浏览器) 改版的不便。

物件资料库

Zope 内附一个 ZODB 资料库，主要的档案管理工作，都被视为物件整理工作，以一种类别、继承的方式加以维护，这是 Zope 实质上较为与众不同之处。

关连式资料库介面

如果实际运作的资料是储存在别的大型资料库内，如 Oracle、Informix、PostgreSQL、Sybase、MySQL 等，那么也可以透过资料库介面来沟通，进而存取原本已储放在里头的各项资料。

动态网页命令稿语言

在 Zope 环境下，如果想要设计出功能丰富的动态网页，可以透过其内建的 DTML (Document Template Markup Language)，如果你原本已熟悉 Python 或 Perl 语法，也可以使用它们。

社群发展及商业支援

Zope 的程式发展模式颇为特殊，社群与商业力量同时注入。自从 1998 年底 Zope 以开放源码授权方式释出后，Zope 的能见度与接受度日渐增加，社群朋友以 http://www.zope.org/ 为公共园地，分享设计理念及心得，而在背后提供完全支援的则是 Digital Creations 公司，该公司提供 Zope 资源整合与技术顾问，目前是 Zope 商业化服务的领导厂商。更由于 Zope 已成功闯出名号，Digital Creations 公司于今年正式将公司名称改为 Zope Corporation，而 Zope.Org 网站则称为 Zope Community。

值得一提的是，Python 程式语言的父亲 Guido van Rossum，于 2000 年十月间，将整个 PythonLabs 程式人员 (持续改进 Python 语言的核心人员) 从 BeOpen 公司移至 Digital Creations 公司，由此可见 Digital Creations 公司对 Zope 及 Python 开发的企图心。最新版之 Python 2.1 与 Zope 2.4 即是在 Digital Creations 公司的赞助下完成，而且 Python 与 Zope 的开发显得更为紧密相关。

开放源码授权

Zope 软体是以 Zope Public License (ZPL) 授权方式释出，和 Python 语言程式一样，都已通过认证为开放源码软体。简单地描述其条款大意，即是，一般的使用及修改，都在授权范围之内，无需额外的费用或授权金，进行软体散布时，大抵要求协助保留 Digital Creations 公司对 Zope 贡献之宣传。标准的 Zope 系统安装之后，可以发现一个 "Power by Zope" 的识别图样及连结，根据授权内容所述，如果使用者想要把此一识别图样移除，本身并不算是构成违反授权条款，但是使用者应保留对 Zope 原创贡献者的广告提示，在 Zope 系统安装后保留识别图样，似乎是最简单的方式了。使用者应该可以在 Zope 系统目录里找到 CREDITS.txt 档案，在此列名者即是 Zope 名人堂的程式大师。

Zope 安装方法

最新版的 Zope 程式可以从官方网站 http://www.zope.org/Products/Zope/ 下载，我们可以找到二进位元档案及原始码档案，二进位元版本包括 Solaris 平台、Win32 平台、Linux glibc2 平台。另外，也有 rpm 档案供 Red Hat Linux 这类具备 rpm 系统的使用者安装。

值得注意的是，最新版 Zope 2.4.0 需要事先安装好 Python 2.1，这项改变对 Windows 平台的使用者影响可能较小，但对 Linux 平台的使用者而言，恐怕就是不小的挑战。我建议 Windows 使用者可以直接下载 Zope 2.4.0 来安装，而 Linux 使用者可以下载 Zope 2.3.x 版本来安装，相信会是最省事的方法。

●表: 建议安装及程式下载处

Windows使用者
 http://www.zope.org/Products/Zope/2.4.0/Zope-2.4.0-win32-x86.exe
 
Linux一般使用者
 ftp://ftp.rpmfind.net/linux/contrib/libc6/i386/Zope-2.3.2-1.i386.rpm
 
Linux进阶使用者
 ftp://ftp.rpmfind.net/linux/contrib/libc6/SRPMS/Zope-2.3.2-1.src.rpm
 
已具备Python 2.1者
 http://www.zope.org/Products/Zope/2.4.0/Zope-2.4.0-src.tgz
 

以 Windows 平台为例，下载后直接执行 Zope-2.4.0-win32-x86.exe 程式，选用预设之 Site Name 名称，输入 Zope 系统管理员帐号密码，最后安装程式还会询问‘是否要将 Zope 以 Win32 服务方式自动启动’，建议以自动启动方式较为方便。如果选择以手动方式启动 Zope，则可以开启 DOS 视窗，输入 bin\python.exe z2.py -a 127.0.0.1 这样的指令，其中的 -a 参数，即是用来指定准备提供连线服务的 IP 位址。

Zope 伺服器的预设服务埠号是 8080，所以安装后必须以 http://127.0.0.1:8080/ 这样的网址型式才能看到 Zope 的管理画面。



●图: Windows 使用者安装时需指定 Site Name



●图: 配合 Site Name 来指定预设安装目录



●图: 指定 Zope 系统管理员帐号密码

　



●图: 指定启动方式



●图: 以系统服务方式自动启动伺服器



●图: 手动在 DOS 视窗里以指令方式启动 Zope

Python 2.1 带来的优点

Python 2.1 版于今年四月间问世，此版本已经支援 Unicode，因此架构于上的 Zope 2.4.0 同样也享受此一好处，另外，WebDAV 的支援更加成熟，还有一些系统改善之处。如果你已经完成 Python 2.1 的升级动作，或有意了解 Zope 2.4.0 从 2.3.x 之后的改进之处，请参考‘Zope 2.4 升级指南’说明。由于多数的 Linux 散布套件，大抵还未即时全面跟上 Python 前阵子的快速更新动作，我猜想不少使用者很容易遇到 Python 版本不相容于 Zope 2.4.0 的问题。想要轻松尝新的朋友，可以考虑试用 Mandrake Linux 8.1 测试版本。

●表: 新版程式下载处

Mandrake 8.1测试版 
 http://ftp.rpmfind.net/linux/Mandrake-iso/i586/

MandrakeLinux-8.1-Raklet-beta1-CD1.i586.iso

http://ftp.rpmfind.net/linux/Mandrake-iso/i586/

MandrakeLinux-8.1-Raklet-beta1-CD2.i586.iso
 
Python 2.1.1
 http://www.python.org/ftp/python/2.1.1/Python-2.1.1.tgz
 
i586 rpm
 ftp://rpmfind.net/linux/Mandrake-devel/cooker/

i586/Mandrake/RPMS/python-2.1.1-2mdk.i586.rpm
 
src rpm
 ftp://rpmfind.net/linux/Mandrake-devel/cooker/

SRPMS/python-2.1.1-2mdk.src.rpm
 

Zope 系统目录结构

由于 Zope 程式在 Windows 平台上安装相当简易，因此我会建议一般使用者可以在 Windows 平台上安装 Zope 程式来进行测试与学习，待熟悉之后，自然再到 Linux 平台上执行服务。安装完毕后，以 Windows 平台为例，可以发现下列几个重要的目录档案：

目录档案
 说明
 
Extensions/
 外部物件方法的储存目录
 
ZServer/
 预设之伺服程式均位于此目录中
 
bin/
 python 执行档案位于此目录中
 
doc/
 文件目录区
 
import/
 准备 import 进 ZODB 的物件可置于此目录
 
inst/
 与系统安装有关的目录
 
lib/
 目录里具备完整的 Zope 系统及 Product 扩充目录
 
pcgi/
 Persistent CGI 的程式目录
 
utilities/
 存放一些工具命令稿或模组程式
 
var/
 内有系统运作执行时所产生的程式序编号记录档
 
z2.py
 系统执行时的资料设定档
 
zpasswd.py
 Zope 帐号密码管理程式
 

Zope 文件计画

好的软体必须要有好的文件。Zope Documentation Projects (ZDP) 是由一群电子数位志工所发起的文件计画，致力于创作出有用而易学的 Zope 学习文件，整个文件创作及维护的运作，同样是以协同式专案方式来进行。

整个 ZDP 之下还分有许多子计画，主要有：

1. ZBook

在网路上共同写作一本适用于 Zope 入门及进阶使用者的书籍，每个章节可以透过提案、讨论方式累积，目前已分有五大部份，并有人译成法文版本。

2. ZFAQ

以收集问答方式累积内容，目前分有十四个目录类别，计有上百条问答集，不过目录类别似乎还未分类稳定。

3. ZSnippets

收集程式高手们的程式片段，目前分有六个目录类别，是 Zope 新手学习的极佳参考。

另外，还有 HOWTO 与 Tips 也在累积当中。随着全球各地的使用者日益增多，Zope 程式与文件也开始重视国际化议题，有人写作出 ZClass 的介面模组，使用者可以照自己的语文需求来调整管理画面，有人投入文件翻译工作。



●图: Zope 文件计画里开始有不少国际化翻译工作

Zope 学习管道

这一年以来，很高兴看到 Python 与 Zope 的书已经广泛出现，虽然大多数还是英文书，但有心学习的朋友总算有了完整的工具，而非全然在网路上搜寻。在此介绍几项学习资源：

书籍: The Zope Book

此书已在今年七月间出版，由 Zope 的开发人员亲自执笔，深入浅出地带领读者认识 Zope 的内涵及架设实务，无论新手或老鸟均适合，内容主要包括：内容管理实务，DTML 设计，ZSQL 连结资料库功能，堪称 Zope 世界的重量级书籍。

作者 Amos Latteier 及 Michel Pelletier 对于这本书的制作，投入相当大的心力，不但尽力要求版本跟上最新的 Zope 发展，更尽心让内容精确无误。本书内容亦可以在网路上阅读，读者可以下载相当精美的 PDF 版本，开放源码前辈的热忱似此，令人感佩无以复加。



●图: Zope 世界里的重量级经典

书籍: The Book of Zope

本书着重 ZClass 设计与 Zope 程式写作，内容包括系统安装、内容管理、ZClass、ZCatalog、资料库、Python 程式设计及除错。不过，这本书预计今年十月才问世，由 beehive 公司编辑，这是一家德国 ISP 公司，在 Zope 专业领域已出版不少受欢迎的电子书。

　

　



●图: The Book of Zope 预计在今年十月出版

Zope 快速参考手册 (ZQR)

如果你已经对 Zope 具备基本了解，而且有意长期参与 Zope 系统的开发，那么 Zope Quick Reference (ZQR) 显然就是必备的工具书了。目前 ZQR 置于 ZDP 之下，收集了相当完整的 Zope 技术内容细节，列印下来就可以放在书桌上参考了。

Zope 邮递论坛

目前已有超过十种的 mailing list 在专门讨论 Zope 技术，这里都是观摩、讨论最新技术的最佳场所，不过，新手们可要事先做好功课，以免到此消化不良了。想要线上直接交谈的朋友，还可以透过 #zope 这个在 irc.zope.net 上的频道，以键会友，如果有需要，可以预先安排交谈时段，以便记录下精彩的讨论内容。

整合资源及力量

‘任何喜爱网站系统的朋友，都应该来瞧瞧 Zope。’

一个以 Python 语言为基底而发展的应用程式，很短的时间内竟也成长得枝繁叶茂，使用族群日益扩大，Zope 除了真的解决许多人的实务需求外，我相信它的开放性与严谨的专案管理模式，才是促成它能够不断蓬勃的原因，看到这么多同好一起贡献才智心力，似乎数位世界的大同理想已在他们手上实践。

我在学习 Python 与 Zope 的过程当中，认为 Zope 确实能够有效解决自己所面对的资讯自动化问题，一些功能设计显得比 PHP 之类的动态网页工具来得优秀，因此乐意与大家分享这些经验。但 Zope 真正与众不同的地方，并不在于它的技术面，而是它赋予所有参与者完整的贡献机会，这正是一个功能多样、分工细致、要求效率的网站系统，所应提供的本质特点。

如果你在学习 Python 之余，也想实际参与 Python 的专案开发，那么 Zope 绝对是你的快乐天堂。
